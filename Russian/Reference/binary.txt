@Title Работа с разными системами счисления

  (Примечание: Эти примеры используют символ ^ в значении 'возвести в степень' - это лишь условность этого документа,
  PureBasic на данный момент не имеет операции возведения в степень! Вместо неё используйте команду Pow() из библиотеки "Math".)

@Section Введение

  Система счисления это способ представления чисел, используя определённое количество возможных символов на цифру.
  Наиболее вам знакома система с основанием 10 (десятичная), потому что цифр существует 10 (от 0 до 9),
  и она наиболее проста в обращении для большинства людей. @LineBreak
  @LineBreak
  Цель этой страницы объяснить разные системы счисления и как с ними работать. Причина этого в том,
  что компьютеры работают в двоичной системе (с основанием 2) и в некоторых случаях это полезно
  понимать (например при использовании логических операций, битовых масок и т.д.).

@Section Обзор систем счисления

@Section Десятичная Система

  Представьте себе десятичное число, а затем представьте, что оно разделено на колонки. Возьмём для примера число 1234.
  Разделение на колонки даёт нам:

@FixedFont
  1   2   3   4
@EndFixedFont

  Теперь представьте, какой заголовок у каждой колонки. Мы знаем, что это единицы, десятки, сотни и тысячи,
  расположенные вот так:

@FixedFont
  1000  100   10    1
     1    2    3    4
@EndFixedFont

  Мы видим, что число 1234 составляется из

@FixedFont
    1*1000=1000
  + 2* 100= 200
  + 3*  10=  30
  + 4*   1=   4
  Всего   =1234
@EndFixedFont

  Если посмотреть на заголовки колонок, вы увидите, что каждый раз, когда вы передвигаетесь на одну колонку влево,
  мы умножаем на 10, что оказывается основанием системы счисления. Каждый раз, когда вы передвигаетесь
  на одну колонку вправо, вы делите на 10. Заголовки колонок можно назвать весами, так как для получения числа
  нам нужно умножить цифры в каждой колонке на вес. Мы можем выразить веса через индексы.
  Например 10^2 означает '10 в степени два' или 1*10*10 (=100). Аналогично 10^4 означает 1*10*10*10*10 (=10000).
  Заметьте закономерность, каково значение индекса, столько раз мы умножаем возводимое в степень число.
  10^0 означает 1 (так как мы умножаем на 10 ноль раз). Использование отрицательных чисел показывает,
  что нам нужно делить, например 10^-2 означает 1/10/10 (=0.01). Значения индексов приобретают более очевидный смысл,
  если мы дадим каждой колонке номер - вы часто будете встречать вещи вроде 'бит 0' что означает 'двоичная цифра в колонке 0'.

@FixedFont
  В этом примере, ^ означает возвести в степень, так что 10^2 означает 10 в степени 2.
  Номер колонки              3     2     1     0
  Вес (через индекс)      10^3  10^2  10^1  10^0
  Вес (значение           1000   100    10     1
  Пример числа (1234)        1     2     3     4
@EndFixedFont

  Несколькими абзацами ранее мы показали как преобразовать число 1234 в его десятичное представление.
  Довольно бессмысленно, так как оно уже в десятичной системе, но так можно показать
  общий метод - вот как преобразовать любое число в его десятичное значение:

@FixedFont
  B = Значение основания системы счисления
  
  1) Разделите число в любой системе счисления на колонки. Например,
     если у нас значение 'abcde' по вымышленному основанию 'B',
     колонки будут:   a   b   c   d   e
  
  2) Умножьте каждый символ на вес этой колонки (вес вычисляется
     как 'B' возведённое в степень номера колонки):
       a * B^4 = a * B * B * B * B
       b * B^3 = b * B * B * B
       c * B^2 = c * B * B
       d * B^1 = d * B
       e * B^0 = e
  
  3) Вычислите сумму всех этих значений. Если в ходе вычислений записывать
     все эти значения в десятичной форме, станет намного проще понять
     результат и делать вычисления (если мы преобразовываем в десятичную систему).
@EndFixedFont

  Преобразование в противоположном направлении (из десятичной системы в систему
  с основанием 'B') делается с использованием деления вместо умножения:

@FixedFont
  1) Начните с десятичного числа, которое вы хотите преобразовать (например 1234).
  
  2) Разделите на требуемое основание ('B') и запомните результат и
     остаток.
  
  3) Разделите результат (2) на требуемое основание ('B') и запомните
     результат и остаток.
  
  4) Продолжайте так делить, пока не получите результат 0.
  
  5) Ваше число в требуемой системе счисления это остатки, записанные в порядке
     от последнего вычисленного к первому. Например ваше число составляется
     из остатков шагов в порядке 432.
@EndFixedFont

  Более конкретные примеры даны в параграфах о конкретных системах счисления.

@Section Двоичная Система

  Всё в компьютере хранится в двоичной системе (основание 2, дающее символы '0' или '1')
  но работа с двоичными числами следует тем же правилам, что и с десятичными.
  Каждый символ двоичного числа называется бит (bit), сокращение от binary digit.
  Обычно вы работаете с байтами (8 бит), словами (16 бит) или длинными словами (32 бита)
  так как это размеры по умолчанию встроенных типов PureBasic. Веса для байта:

@FixedFont
  (^ означает 'возвести в степень', основание системы 2 для двоичной)
  Номер бита/колонки        7     6     5     4     3     2     1     0
  Вес (индекс)            2^7   2^6   2^5   2^4   2^3   2^2   2^1   2^0
  Вес (значение)          128    64    32    16     8     4     2     1
@EndFixedFont

  Например, если у нас число 00110011 (Основание 2), мы можем найти его значение так:

@FixedFont
    0 * 128
  + 0 *  64
  + 1 *  32
  + 1 *  16
  + 0 *   8
  + 0 *   4
  + 1 *   2
  + 1 *   1
  =      51
@EndFixedFont

  Примером обратного преобразования была бы запись значения 69 в двоичной системе. Мы сделаем это так:

@FixedFont
  69 / 2 = 34 r 1     ^
  34 / 2 = 17 r 0    /|\
  17 / 2 =  8 r 1     |
   8 / 2 =  4 r 0     |    Читаем остатки в этом направлении
   4 / 2 =  2 r 0     |
   2 / 2 =  1 r 0     |
   1 / 2 =  0 r 1     |
  (Здесь стоп, так как результат последнего деления был 0)

  Читаем остатки назад для получения двоичного значения = 1000101
@EndFixedFont  

  Ещё что следует учесть при работе с двоичными числами, это представление отрицательных чисел.
  В повседневном использовании, мы просто помещаем символ отрицательного числа впереди десятичного числа.
  Мы не может так сделать в двоичной системе, но способ есть (в конце концов PureBasic работает
  в основном со знаковыми числами, поэтому должен уметь управляться с отрицательными числами).
  Этот метод называется 'дополнение до двух' и помимо всех его хороших черт (здесь не объясняемых
  для уменьшения путаницы) простейший способ думать о нём - считать, что вес старшего бита
  (бит с наибольшим весом, в случае байта это бит 7) это отрицательное значение.
  Так что для системы дополнения до двух веса битов меняются на:

@FixedFont  
  (^ означает 'возвести в степень', основание системы 2 для двоичной)
  Номер бита/колонки        7     6     5     4     3     2     1     0
  Вес (индекс)           -2^7   2^6   2^5   2^4   2^3   2^2   2^1   2^0
  Вес (значение)         -128    64    32    16     8     4     2     1
@EndFixedFont  

  и вы делаете преобразование из двоичной системы в десятичную точно так же, как выше,
  но используя новый набор весов. Например, число 10000000 (Основание 2) это -128, а 10101010 (Основание 2) это -86. @LineBreak
  @LineBreak
  Чтобы преобразовать положительное двоичное число в отрицательное двоичное число и наоборот,
  вы обращаете все биты и затем прибавляете 1. Например, 00100010 можно сделать отрицательным,
  обратив -> 11011101 и прибавив 1 -> 11011110. @LineBreak
  @LineBreak
  Это делает преобразование из десятичной системы в двоичную проще, так как вы можете преобразовывать отрицательные десятичные числа 
  как их положительные эквиваленты (используя показанный выше метод) и затем делать двоичное число отрицательным в конце.  @LineBreak
   @LineBreak
  Двоичные числа записываются в PureBasic с символом процента перед ними, и очевидно все биты числа
  должны быть '0' или '1'. Например, вы можете использовать значение %110011 в PureBasic для обозначения 51.
  Заметьте, что вам не нужно добавлять ведущие '0' (это число на самом деле равно %00110011),
  но если вы укажете полное количество битов, это может помочь удобочитаемости ваших исходников.

@Section Шестнадцатеричная Система
  
  Шестнадцатеричная система (основание 16, символы '0'-'9' и 'A'-'F') это система счисления,
  которая наиболее широко используется при работе с компьютерами, так как это наверно самая
  простая для человеческого понимания из недесятичных систем, и вам не приходится иметь дело
  с длинными строками символов в качестве чисел (как в случае работы с двоичной системой).  @LineBreak
  @LineBreak
  Шестнадцатеричная математика следует тем же правилам, что и десятичная, хотя у вас теперь
  есть 16 символов на колонку пока вам не понадобится перенос/заём. Преобразование между
  шестнадцатеричной и десятичной системами следует тем же закономерностям, как между двоичной
  и десятичной, кроме того что веса теперь умножаются на 16 и делятся на 16 вместо 2:

@FixedFont  
  Номер колонки              3      2      1      0
  Вес (индекс)            16^3   16^2   16^1   16^0
  Вес (значение)          4096    256     16      1
@EndFixedFont  

  Преобразование шестнадцатеричного значения BEEF (Основание 16) в десятичное делается так:

@FixedFont  
    B * 4096 = 11 * 4096
  + E *  256 = 14 *  256
  + E *   16 = 14 *   16
  + F *    1 = 15 *    1
  =                48879
@EndFixedFont  

  А преобразование значения 666 в шестнадцатеричное делается так:

@FixedFont  
  666 / 16 = 41 r 10    ^
   41 / 16 =  2 r  9   /|\    Читаем цифры в этом направлении, не забывая преобразовывать
    2 / 16 =  0 r  2    |     в шестнадцатеричные цифры где потребуется
  (Здесь стоп, так как результат 0)
  Шестнадцатеричное значение 666 равно 29A
@EndFixedFont  

  В шестнадцатеричной системе хорошо то, что она позволяет преобразовывать в двоичную систему очень просто.
  Каждая шестнадцатеричная цифра представляет собой 4 бита, так что для преобразования между шестнадцатеричной и двоичной системами,
  вам нужно только преобразовать каждую шестнадцатеричную цифру в 4 бита или каждые 4 бита в одну шестнадцатеричную цифру
  (и учесть, что 4 общий делитель всех типичных значений длины двоичного числа в процессоре). Например:

@FixedFont  
  Шестн. число        5        9        D        F           4E
  Двоичное число    0101     1001     1101     1111       01001110
@EndFixedFont  

  При использовании шестнадцатеричных значений в PureBasic, вы помещаете знак доллара впереди числа, например $BEEF.