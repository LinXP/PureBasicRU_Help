;
;     Http library documentation
;
;      (c) Fantaisie Software
;

@Library Http

@Overview

  Http is the name of the protocol used by web browsers to access remote information,
  such as a web page. Each item has an unique address in order to access it from anywhere,
  this is its: URL (Uniform Resource Locator). The functions within this library are
  designed to provide easy manipulation of URLs and the capability to retrieve remote files.
@LineBreak
@LineBreak
  The Http commands are based on the @LibraryLink "Network" "network library", so @@InitNetwork 
  must be called successfully before using them.

@CommandList

@ExampleFile All Http.pb

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function AbortHTTP(HttpConnection)

@Description
  Aborts the progress of the specified asynchronous download, started either with @@ReceiveHTTPFile or
  @@ReceiveHTTPMemory.

@Parameter "HttpConnection"
  The HTTP connection to abort.

@NoReturnValue

@Remarks
  The value @#PB_HTTP_Aborted will be returned by @@HTTPProgress. @@FinishHTTP has to be called once the download has been aborted.

@SeeAlso
  @@HTTPProgress, @@FinishHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = FinishHTTP(HttpConnection)

@Description
  Free the resources associated to the specified asynchronous download, started either with @@ReceiveHTTPFile or
  @@ReceiveHTTPMemory.

@Parameter "HttpConnection"
  The HTTP connection to finish.

@ReturnValue
  If the download has been successful, it returns the number of bytes written to disk for a download
  start with @@ReceiveHTTPFile, or the memory buffer address for a download started 
  with @@ReceiveHTTPMemory.

@Remarks
  The value @#PB_HTTP_Aborted will be returned by @@HTTPProgress.

@SeeAlso
  @@HTTPProgress, @@AbortHTTP

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = GetHTTPHeader(URL$)

@Description

  Get the HTTP headers of the given URL. 

@Parameter "URL$"
  The URL for the query. The URL must be fully qualified, and must include
  the "http://" or "https://" prefix.

@ReturnValue
  Returns a string containing the header lines. Each line ends with a 
  @Link "String/Chr" "Chr(10)" character.
  @@StringField can be used to split it into several strings.
@LineBreak
@LineBreak
  The content of the headers are dependent on the
  type of server and therefore their contents vary, but the header that is returned by
  that server, provides very useful information about the file, such as the date, the
  server type, the version, and more. 

@Remarks
  @@InitNetwork has to be called before using this command.

@Example
@Code
  InitNetwork()

  Header$ = GetHTTPHeader("http://www.purebasic.com/index.php")

  Repeat
    Index+1
    Line$ = StringField(Header$, Index, #LF$)
    Debug Line$
  Until Line$ = ""
@EndCode

  Example of returned headers:

@FixedFont
  HTTP/1.1 200 OK
  Date: Fri, 21 Mar 2008 09:49:30 GMT
  Server: Apache/1.3.34 (Debian) mod_vhost_online/1.1 mod_fastcgi/2.4.2 mod_log_online/0.1
  X-Powered-By: PHP/4.4.8-1
  Content-Type: text/html
@EndFixedFont

@SeeAlso
  @@ReceiveHTTPFile, @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = GetURLPart(URL$, Parameter$)

@Description

  Get a specific part of the given URL$. This can be a named parameter in the URL string or another part of the URL.

@Parameter "URL$"
  The URL$ to get the part from.
  The URL$ may contain parameters, which are useful when a scripting language
  such as: (PHP) is being used on that server. The syntax is as follows: (http://www.purebasic.com/index.php3?test=1)
  Here, the parameter is named "test" and its associated value is "1". 

@Parameter "Parameter$"
  The parameter to return from the URL$. The parameters are not case-sensitive. 
  This parameter can also specify one of the following constants to access other parts of the URL:
@FixedFont
  @#PB_URL_Protocol: returns the protocol from the URL$
  @#PB_URL_Site: returns the site from the URL$
  @#PB_URL_Port: returns the port from the URL$ (if specified)
  @#PB_URL_Parameters: returns all the parameters from the URL$
  @#PB_URL_Path: returns the path from the URL$
  @#PB_URL_User: returns the username from the URL$ (if specified)
  @#PB_URL_Password: returns the password from the URL$ (if specified)
@EndFixedFont

@ReturnValue
  Returns the parameter value or other part of the URL.

@Example
@Code
  URL$ = "http://user:pass@www.purebasic.com:80/index.php3?test=1&ok=2"

  Debug GetURLPart(URL$, #PB_URL_Protocol) ; Will print "http"
  Debug GetURLPart(URL$, #PB_URL_Site)     ; Will print "www.purebasic.com"
  Debug GetURLPart(URL$, #PB_URL_Port)     ; Will print "80"
  Debug GetURLPart(URL$, #PB_URL_Parameters) ; Will print "test=1&ok=2"
  Debug GetURLPart(URL$, #PB_URL_Path)     ; Will print "index.php3"
  Debug GetURLPart(URL$, #PB_URL_User)     ; Will print "user"
  Debug GetURLPart(URL$, #PB_URL_Password) ; Will print "pass"
  Debug GetURLPart(URL$, "test")           ; Will print "1"
  Debug GetURLPart(URL$, "ok")             ; Will print "2"
@EndCode

@SeeAlso
  @@SetURLPart, @@URLDecoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = HTTPProgress(HttpConnection)

@Description
  Returns the progress of the specified asynchronous download, started either with @@ReceiveHTTPFile or
  @@ReceiveHTTPMemory.

@Parameter "HttpConnection"
  The HTTP connection to monitor.

@ReturnValue
  The status of the download. It can be the current number of recieved bytes or one of the following value:
@FixedFont
  @#PB_Http_Success    : the download has been successfully finished.
  @#PB_Http_Failed     : the download has failed.
  @#PB_Http_Aborted    : the download has been aborted with @@AbortHTTP.
@EndFixedFont

@Example
@Code
  InitNetwork()

  Download = ReceiveHTTPMemory("http://www.purebasic.com/download/OgreAssimpConverter.zip", #PB_HTTP_Asynchronous)
  If Download
    Repeat
      Progress = HTTPProgress(Download)
      Select Progress
        Case #PB_Http_Success
          *Buffer = FinishHTTP(Download)
          Debug "Download finished (size: " + MemorySize(*Buffer) + ")"
          FreeMemory(*Buffer)
          End

        Case #PB_Http_Failed
          Debug "Download failed"
          End

        Case #PB_Http_Aborted
          Debug "Download aborted"
          End
          
        Default
          Debug "Current download: " + Progress
       
      EndSelect
      
      Delay(500) ; Don't stole the whole CPU
    ForEver
  Else
    Debug "Download error"
  EndIf
@EndCode

@SeeAlso
  @@ReceiveHTTPFile, @@ReceiveHTTPMemory

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result = ReceiveHTTPFile(URL$, Filename$ [, Flags])

@Description
  Download a file to disk from the given URL$. 

@Parameter "URL$"
  The URL to download from.

@Parameter "Filename$"
  The local filename to write the file to. If the filename does not include a full path, it
  is interpreted relative to the @Link "FileSystem/GetCurrentDirectory" "current directory".
  If the file exists, it will be overwritten.

@OptionalParameter "Flags"
  It can be a combination of the following value:
@FixedFont
  @#PB_HTTP_Asynchronous: starts the download asynchronously.
  @#PB_HTTP_NoRedirect  : don't follow automatic redirections.
@EndFixedFont

@ReturnValue
  Returns nonzero if the download was successful, zero otherwise. If @#PB_HTTP_Asynchronous
  was specified, it returns the 'HttpConnection' value needed for @@HTTPProgress,
  @@AbortHTTP and @@FinishHTTP.

@Remarks
  @@InitNetwork has to be called before using this command.

@Example
@Code
  InitNetwork()

  Filename$ = SaveFileRequester("Where to save index.php ?", "", "", 0)

  If ReceiveHTTPFile("http://www.purebasic.com/index.php", Filename$)
    Debug "Success"
  Else
    Debug "Failed"
  EndIf
@EndCode

@SeeAlso
  @@GetHTTPHeader, @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function *Buffer = ReceiveHTTPMemory(URL$ [, Flags])

@Description
  Download a file to a new memory buffer from the given URL$. 

@Parameter "URL$"
  The URL to download from.

@OptionalParameter "Flags"
  It can be a combination of the following value:
@FixedFont
  @#PB_HTTP_Asynchronous: starts the download asynchronously. To get the memory buffer address use @@FinishHTTP.
  @#PB_HTTP_NoRedirect  : don't follow automatic redirections.
@EndFixedFont

@ReturnValue
  Returns the new memory buffer address if the download was successful, zero otherwise. @@MemorySize can be
  used to get the size of the downloaded item. The memory buffer needs
  to be freed with @@FreeMemory once finished using it. If @#PB_HTTP_Asynchronous
  was specified, it returns the 'HttpConnection' value needed for @@HTTPProgress,
  @@AbortHTTP and @@FinishHTTP.

@Remarks
  @@InitNetwork has to be called before using this command.

@Example
@Code
  InitNetwork()

  *Buffer = ReceiveHTTPMemory("http://www.purebasic.com/index.php")
  If *Buffer
    Size = MemorySize(*Buffer)
    Debug "Content: " + PeekS(*Buffer, Size, #PB_UTF8)
    FreeMemory(*Buffer)
  Else
    Debug "Failed"
  EndIf
@EndCode

@SeeAlso
  @@GetHTTPHeader, @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = URLDecoder(URL$ [, Format])

@Description
  Returns a decoded URL$ which has been encoded with the HTTP format.

@Parameter "URL$"
  The URL to decode. To encode an URL, use @@URLEncoder.

@OptionalParameter "Format"
  The format of the URL encoding. It can be one of the following value:
@FixedFont
  @#PB_UTF8  (default)
  @#PB_Ascii
@EndFixedFont  

@ReturnValue
  Returns the decoded URL.

@Remarks
  A URL$ may not contain certain characters such as: tab, space, accent letter etc.,
  therefore these characters must be encoded, which basically involves using "%" as an escape
  character. If the URL$ is not in an encoded format, this function will have no effect on the
  given "URL$" and the return-value of that "URL$" will remain unchanged.

@Example
@Code
  Debug URLDecoder("http://www.purebasic.com/test%20with%20space.php3")
  ; Will print "http://www.purebasic.com/test with space.php3"
@EndCode

@SeeAlso
  @@URLEncoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = URLEncoder(URL$ [, Format])

@Description
  Returns the URL$ encoded to the HTTP format.

@Parameter "URL$"
  The URL to encode.

@OptionalParameter "Format"
  The format of the string before encoding it. It can be one of the following value:
@FixedFont
  @#PB_UTF8  (default)
  @#PB_Ascii
@EndFixedFont  

@ReturnValue
  Returns the encoded URL.
  To convert an encoded URL back to a unencoded format, use @@URLDecoder

@Remarks
  A URL$ may not contain certain characters such as: tab, space, accent letter etc.,
  therefore these characters must be encoded, which basically involves using "%" as an escape
  character.

@Example
@Code
  Debug URLEncoder("http://www.purebasic.com/test with space.php3")
  ; Will print "http://www.purebasic.com/test%20with%20space.php3"
@EndCode

@SeeAlso
  @@URLDecoder

@SupportedOS

;--------------------------------------------------------------------------------------------------------

@Function Result$ = SetURLPart(URL$, Parameter$, Value$)

@Description
  Set a specific part of the given URL$. 

@Parameter "URL$"
  The URL to modify.
  A URL$ may contain parameters, which are useful when a scripting language
  such as: (PHP) is being used on that server. The syntax is as follows: (http://www.purebasic.com/index.php3?test=1)
  Here, the parameter is named "test" and its associated value is "1".
@LineBreak
@LineBreak
  In order to set a specific part of a URL, the information provided within "URL$" must (at the minimum),
  be of the following format: ("http://www.purebasic.com")

@Parameter "Parameter$"
  The parameter to modify.
  The parameters are not case-sensitive. Moreover, Parameter$ may be one of the following constants:
@FixedFont
  @#PB_URL_Protocol: change the protocol of the URL$
  @#PB_URL_Site: change the site of the URL$
  @#PB_URL_Port: change the port of the URL$ (or adds it if not specified)
  @#PB_URL_Parameters: changes all the parameters of the URL$ (or adds it if not specified)
  @#PB_URL_Path: changes the path of the URL$ (or adds it if not specified)
  @#PB_URL_User: changes the username of the URL$ (or adds it if not specified)
  @#PB_URL_Password: changes the password of the URL$  (or adds it if not specified - the "user" needs to exist)
@EndFixedFont

@Parameter "Value$"
  The value to assign to the given parameter or URL part.

@ReturnValue
  Returns the modified URL.

@Example
@Code
  URL$ = "http://www.test.com/hello.php3"

  URL$ = SetURLPart(URL$, #PB_URL_Protocol, "ftp")
  URL$ = SetURLPart(URL$, #PB_URL_Site, "www.purebasic.com")
  URL$ = SetURLPart(URL$, #PB_URL_Port, "80")
  URL$ = SetURLPart(URL$, #PB_URL_Path, "english/index.php3")
  URL$ = SetURLPart(URL$, #PB_URL_User, "user")
  URL$ = SetURLPart(URL$, #PB_URL_Password, "pass")
  URL$ = SetURLPart(URL$, "test", "1")
  URL$ = SetURLPart(URL$, "ok", "2")

  Debug URL$ ; Will print "ftp://user:pass@www.purebasic.com:80/english/index.php3?test=1&ok=2"

@EndCode

@SeeAlso
  @@GetURLPart, @@URLEncoder

@SupportedOS
